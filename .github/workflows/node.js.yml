# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: nextjs

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    - uses: actions/cache@v4
      with:
        # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ${{ github.workspace }}/nextjs/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: "${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}"
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
    - run: npm ci
      working-directory: nextjs
    - run: mv .env.cicd .env.local
    - run: npx auth secret
    - run: npm run build --if-present
      working-directory: nextjs
    - run: ip addr show docker0 | grep -Po 'inet \K[\d.]+'
    - run: PLATFORM=linux npm run test:cicd --
      working-directory: nextjs
    - name: Upload Mocha test report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: mocha-report
        path: mocha-reports/report.json

    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/lcov-report/index.html

    - name: Publish Test Results (GitHub Checks)
      if: always()
      run: |
        mkdir -p $GITHUB_WORKSPACE/test-results
        cp mocha-reports/report.json $GITHUB_WORKSPACE/test-results
        cp coverage/lcov-report/index.html $GITHUB_WORKSPACE/test-results
        
    - name: Upload test results to GitHub checks
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: $GITHUB_WORKSPACE/test-results/report.json
